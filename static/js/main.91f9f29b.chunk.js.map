{"version":3,"sources":["Containers/robots.js","Components/Card.js","Components/CardList.js","Components/SearchField.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","CardComp","Card","style","width","Img","variant","src","Body","Title","Text","Button","CardList","CardArray","map","robot","index","Col","key","xs","Container","Row","className","SearchField","searchFieldChange","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","Scroll","props","overflow","border","height","children","ErrorBoundry","state","error","first","info","this","setState","console","log","Component","App","changeSearchField","event","target","value","searchfield","filteredRobots","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.91f9f29b.chunk.js","sourcesContent":["export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, {Fragment} from 'react'\r\nimport {Card} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst CardComp = ({id, name, email}) => {\r\n    return(\r\n        <Fragment>\r\n        <Card style={{ width: '18rem' }} >\r\n  <Card.Img variant=\"top\" src=\"http://placekitten.com/800/450\" />\r\n  <Card.Body>\r\n    <Card.Title>{email}</Card.Title>\r\n    <Card.Text>{name}\r\n    </Card.Text>\r\n    <Button variant=\"primary\">{id}</Button>\r\n  </Card.Body>\r\n</Card>\r\n</Fragment>\r\n    )\r\n}\r\n\r\nexport default CardComp;","import React, {Fragment} from 'react'\r\nimport Card from './Card.js'\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\n\r\nconst CardList = ({robots}) => {\r\n    const CardArray = robots.map( (robot, index) => { return(<Col key={robots[index].id} xs=\"auto\"><Card  id={robots[index].id} name={robots[index].name} email={robots[index].email} /></Col>) })\r\n    return(\r\n        <Fragment>\r\n           <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    {CardArray}\r\n                </Row>\r\n            </Container>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, {Fragment} from 'react'\r\nimport {Container, Row, Col, InputGroup,FormControl} from 'react-bootstrap'\r\n\r\n\r\nconst SearchField = ({searchFieldChange}) => {\r\n    return(\r\n        <Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <InputGroup className=\"my-3\">\r\n                            <FormControl\r\n                            placeholder=\"RobotName\"\r\n                            aria-label=\"RobotName\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={searchFieldChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchField;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflow:'scroll' ,border:'5px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            error : false\r\n        }\r\n        \r\n    }\r\n    componentDidCatch(first, info){\r\n        this.setState({error : true});\r\n        console.log(\"hi?\")\r\n    }\r\n    render () {\r\n        return this.state.error ? (<p>Something went wrong</p>):(this.props.children)\r\n        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Fragment} from 'react'\r\nimport {robots} from './robots.js'\r\nimport CardList from '../Components/CardList.js'\r\nimport SearchField from '../Components/SearchField.js'\r\nimport Scroll from '../Components/Scroll.js'\r\nimport ErrorBoundry from '../Components/ErrorBoundry.js'\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //fetch example = fetch('https://api.chucknorris.io/jokes/random').then((response)=>{return response.json()}).then(data => console.log(data.value))\r\n    }\r\n    changeSearchField = (event)=>{\r\n            console.log(event.target.value);\r\n            this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(\r\n            (robot)=>{\r\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n            }\r\n        );\r\n        return(\r\n        <Fragment>\r\n            <SearchField searchFieldChange={this.changeSearchField}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Containers/App.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}